Terminals unused in grammar

    CASE
    TRUE
    FALSE
    WHEN
    ENDCASE
    OTHERS


Grammar

    0 $accept: function $end

    1 function: function_header optional_variable body

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';'
    3                | FUNCTION IDENTIFIER RETURNS type ';'
    4                | error ';'

    5 optional_variable: optional_variable variable
    6                  | error ';'
    7                  | %empty

    8 variable: IDENTIFIER ':' type IS statement_

    9 parameters: parameter optional_parameter

   10 optional_parameter: optional_parameter ',' parameter
   11                   | %empty

   12 parameter: IDENTIFIER ':' type

   13 type: INTEGER
   14     | DOUBLE
   15     | REAL
   16     | BOOLEAN

   17 body: BEGIN_ statement_ END ';'

   18 statement_: statement ';'
   19           | error ';'

   20 statement: expression
   21          | REDUCE operator reductions ENDREDUCE
   22          | IF expression THEN statement_ ELSE statement_ ENDIF

   23 operator: ADDOP
   24         | RELOP
   25         | EXPOP
   26         | MULOP

   27 reductions: reductions statement_
   28           | %empty

   29 expression: expression OROP binary
   30           | binary

   31 binary: binary ANDOP relation
   32       | relation

   33 relation: relation RELOP term
   34         | term

   35 term: term ADDOP factor
   36     | factor

   37 factor: factor MULOP exponent
   38       | factor REMOP exponent
   39       | exponent

   40 exponent: unary
   41         | unary EXPOP exponent

   42 unary: NOTOP primary
   43      | primary

   44 primary: '(' expression ')'
   45        | INT_LITERAL
   46        | DOUBLE_LITERAL
   47        | REAL_LITERAL
   48        | BOOL_LITERAL
   49        | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 44
    ')' (41) 44
    ',' (44) 10
    ':' (58) 8 12
    ';' (59) 2 3 4 6 17 18 19
    error (256) 4 6 19
    IDENTIFIER <iden> (258) 2 3 8 12 49
    INT_LITERAL <value> (259) 45
    DOUBLE_LITERAL <value> (260) 46
    REAL_LITERAL <value> (261) 47
    BOOL_LITERAL <value> (262) 48
    CASE <value> (263)
    TRUE <value> (264)
    FALSE <value> (265)
    ADDOP <oper> (266) 23 35
    MULOP <oper> (267) 26 37
    RELOP <oper> (268) 24 33
    OROP <oper> (269) 29
    NOTOP <oper> (270) 42
    REMOP <oper> (271) 38
    EXPOP <oper> (272) 25 41
    ANDOP (273) 31
    BEGIN_ (274) 17
    BOOLEAN (275) 16
    END (276) 17
    ENDREDUCE (277) 21
    FUNCTION (278) 2 3
    INTEGER (279) 13
    DOUBLE (280) 14
    IS (281) 8
    REDUCE (282) 21
    RETURNS (283) 2 3
    THEN (284) 22
    WHEN (285)
    ELSE (286) 22
    ENDCASE (287)
    ENDIF (288) 22
    IF (289) 22
    OTHERS (290)
    REAL (291) 15


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    function (43)
        on left: 1
        on right: 0
    function_header (44)
        on left: 2 3 4
        on right: 1
    optional_variable (45)
        on left: 5 6 7
        on right: 1 5
    variable (46)
        on left: 8
        on right: 5
    parameters (47)
        on left: 9
        on right: 2
    optional_parameter (48)
        on left: 10 11
        on right: 9 10
    parameter (49)
        on left: 12
        on right: 9 10
    type (50)
        on left: 13 14 15 16
        on right: 2 3 8 12
    body <value> (51)
        on left: 17
        on right: 1
    statement_ <value> (52)
        on left: 18 19
        on right: 8 17 22 27
    statement <value> (53)
        on left: 20 21 22
        on right: 18
    operator <oper> (54)
        on left: 23 24 25 26
        on right: 21
    reductions <value> (55)
        on left: 27 28
        on right: 21 27
    expression <value> (56)
        on left: 29 30
        on right: 20 22 29 44
    binary <value> (57)
        on left: 31 32
        on right: 29 30 31
    relation <value> (58)
        on left: 33 34
        on right: 31 32 33
    term <value> (59)
        on left: 35 36
        on right: 33 34 35
    factor <value> (60)
        on left: 37 38 39
        on right: 35 36 37 38
    exponent <value> (61)
        on left: 40 41
        on right: 37 38 39 41
    unary <value> (62)
        on left: 42 43
        on right: 40 41
    primary <value> (63)
        on left: 44 45 46 47 48 49
        on right: 42 43


State 0

    0 $accept: . function $end

    error     shift, and go to state 1
    FUNCTION  shift, and go to state 2

    function         go to state 3
    function_header  go to state 4


State 1

    4 function_header: error . ';'

    ';'  shift, and go to state 5


State 2

    2 function_header: FUNCTION . IDENTIFIER parameters RETURNS type ';'
    3                | FUNCTION . IDENTIFIER RETURNS type ';'

    IDENTIFIER  shift, and go to state 6


State 3

    0 $accept: function . $end

    $end  shift, and go to state 7


State 4

    1 function: function_header . optional_variable body

    error  shift, and go to state 8

    IDENTIFIER  reduce using rule 7 (optional_variable)
    BEGIN_      reduce using rule 7 (optional_variable)

    optional_variable  go to state 9


State 5

    4 function_header: error ';' .

    $default  reduce using rule 4 (function_header)


State 6

    2 function_header: FUNCTION IDENTIFIER . parameters RETURNS type ';'
    3                | FUNCTION IDENTIFIER . RETURNS type ';'

    IDENTIFIER  shift, and go to state 10
    RETURNS     shift, and go to state 11

    parameters  go to state 12
    parameter   go to state 13


State 7

    0 $accept: function $end .

    $default  accept


State 8

    6 optional_variable: error . ';'

    ';'  shift, and go to state 14


State 9

    1 function: function_header optional_variable . body
    5 optional_variable: optional_variable . variable

    IDENTIFIER  shift, and go to state 15
    BEGIN_      shift, and go to state 16

    variable  go to state 17
    body      go to state 18


State 10

   12 parameter: IDENTIFIER . ':' type

    ':'  shift, and go to state 19


State 11

    3 function_header: FUNCTION IDENTIFIER RETURNS . type ';'

    BOOLEAN  shift, and go to state 20
    INTEGER  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 24


State 12

    2 function_header: FUNCTION IDENTIFIER parameters . RETURNS type ';'

    RETURNS  shift, and go to state 25


State 13

    9 parameters: parameter . optional_parameter

    $default  reduce using rule 11 (optional_parameter)

    optional_parameter  go to state 26


State 14

    6 optional_variable: error ';' .

    $default  reduce using rule 6 (optional_variable)


State 15

    8 variable: IDENTIFIER . ':' type IS statement_

    ':'  shift, and go to state 27


State 16

   17 body: BEGIN_ . statement_ END ';'

    error           shift, and go to state 28
    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    REDUCE          shift, and go to state 35
    IF              shift, and go to state 36
    '('             shift, and go to state 37

    statement_  go to state 38
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 17

    5 optional_variable: optional_variable variable .

    $default  reduce using rule 5 (optional_variable)


State 18

    1 function: function_header optional_variable body .

    $default  reduce using rule 1 (function)


State 19

   12 parameter: IDENTIFIER ':' . type

    BOOLEAN  shift, and go to state 20
    INTEGER  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 48


State 20

   16 type: BOOLEAN .

    $default  reduce using rule 16 (type)


State 21

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


State 22

   14 type: DOUBLE .

    $default  reduce using rule 14 (type)


State 23

   15 type: REAL .

    $default  reduce using rule 15 (type)


State 24

    3 function_header: FUNCTION IDENTIFIER RETURNS type . ';'

    ';'  shift, and go to state 49


State 25

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS . type ';'

    BOOLEAN  shift, and go to state 20
    INTEGER  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 50


State 26

    9 parameters: parameter optional_parameter .
   10 optional_parameter: optional_parameter . ',' parameter

    ','  shift, and go to state 51

    $default  reduce using rule 9 (parameters)


State 27

    8 variable: IDENTIFIER ':' . type IS statement_

    BOOLEAN  shift, and go to state 20
    INTEGER  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    REAL     shift, and go to state 23

    type  go to state 52


State 28

   19 statement_: error . ';'

    ';'  shift, and go to state 53


State 29

   49 primary: IDENTIFIER .

    $default  reduce using rule 49 (primary)


State 30

   45 primary: INT_LITERAL .

    $default  reduce using rule 45 (primary)


State 31

   46 primary: DOUBLE_LITERAL .

    $default  reduce using rule 46 (primary)


State 32

   47 primary: REAL_LITERAL .

    $default  reduce using rule 47 (primary)


State 33

   48 primary: BOOL_LITERAL .

    $default  reduce using rule 48 (primary)


State 34

   42 unary: NOTOP . primary

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    '('             shift, and go to state 37

    primary  go to state 54


State 35

   21 statement: REDUCE . operator reductions ENDREDUCE

    ADDOP  shift, and go to state 55
    MULOP  shift, and go to state 56
    RELOP  shift, and go to state 57
    EXPOP  shift, and go to state 58

    operator  go to state 59


State 36

   22 statement: IF . expression THEN statement_ ELSE statement_ ENDIF

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    expression  go to state 60
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 37

   44 primary: '(' . expression ')'

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    expression  go to state 61
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 38

   17 body: BEGIN_ statement_ . END ';'

    END  shift, and go to state 62


State 39

   18 statement_: statement . ';'

    ';'  shift, and go to state 63


State 40

   20 statement: expression .
   29 expression: expression . OROP binary

    OROP  shift, and go to state 64

    $default  reduce using rule 20 (statement)


State 41

   30 expression: binary .
   31 binary: binary . ANDOP relation

    ANDOP  shift, and go to state 65

    $default  reduce using rule 30 (expression)


State 42

   32 binary: relation .
   33 relation: relation . RELOP term

    RELOP  shift, and go to state 66

    $default  reduce using rule 32 (binary)


State 43

   34 relation: term .
   35 term: term . ADDOP factor

    ADDOP  shift, and go to state 67

    $default  reduce using rule 34 (relation)


State 44

   36 term: factor .
   37 factor: factor . MULOP exponent
   38       | factor . REMOP exponent

    MULOP  shift, and go to state 68
    REMOP  shift, and go to state 69

    $default  reduce using rule 36 (term)


State 45

   39 factor: exponent .

    $default  reduce using rule 39 (factor)


State 46

   40 exponent: unary .
   41         | unary . EXPOP exponent

    EXPOP  shift, and go to state 70

    $default  reduce using rule 40 (exponent)


State 47

   43 unary: primary .

    $default  reduce using rule 43 (unary)


State 48

   12 parameter: IDENTIFIER ':' type .

    $default  reduce using rule 12 (parameter)


State 49

    3 function_header: FUNCTION IDENTIFIER RETURNS type ';' .

    $default  reduce using rule 3 (function_header)


State 50

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type . ';'

    ';'  shift, and go to state 71


State 51

   10 optional_parameter: optional_parameter ',' . parameter

    IDENTIFIER  shift, and go to state 10

    parameter  go to state 72


State 52

    8 variable: IDENTIFIER ':' type . IS statement_

    IS  shift, and go to state 73


State 53

   19 statement_: error ';' .

    $default  reduce using rule 19 (statement_)


State 54

   42 unary: NOTOP primary .

    $default  reduce using rule 42 (unary)


State 55

   23 operator: ADDOP .

    $default  reduce using rule 23 (operator)


State 56

   26 operator: MULOP .

    $default  reduce using rule 26 (operator)


State 57

   24 operator: RELOP .

    $default  reduce using rule 24 (operator)


State 58

   25 operator: EXPOP .

    $default  reduce using rule 25 (operator)


State 59

   21 statement: REDUCE operator . reductions ENDREDUCE

    $default  reduce using rule 28 (reductions)

    reductions  go to state 74


State 60

   22 statement: IF expression . THEN statement_ ELSE statement_ ENDIF
   29 expression: expression . OROP binary

    OROP  shift, and go to state 64
    THEN  shift, and go to state 75


State 61

   29 expression: expression . OROP binary
   44 primary: '(' expression . ')'

    OROP  shift, and go to state 64
    ')'   shift, and go to state 76


State 62

   17 body: BEGIN_ statement_ END . ';'

    ';'  shift, and go to state 77


State 63

   18 statement_: statement ';' .

    $default  reduce using rule 18 (statement_)


State 64

   29 expression: expression OROP . binary

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    binary    go to state 78
    relation  go to state 42
    term      go to state 43
    factor    go to state 44
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 65

   31 binary: binary ANDOP . relation

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    relation  go to state 79
    term      go to state 43
    factor    go to state 44
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 66

   33 relation: relation RELOP . term

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    term      go to state 80
    factor    go to state 44
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 67

   35 term: term ADDOP . factor

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    factor    go to state 81
    exponent  go to state 45
    unary     go to state 46
    primary   go to state 47


State 68

   37 factor: factor MULOP . exponent

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    exponent  go to state 82
    unary     go to state 46
    primary   go to state 47


State 69

   38 factor: factor REMOP . exponent

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    exponent  go to state 83
    unary     go to state 46
    primary   go to state 47


State 70

   41 exponent: unary EXPOP . exponent

    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    '('             shift, and go to state 37

    exponent  go to state 84
    unary     go to state 46
    primary   go to state 47


State 71

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';' .

    $default  reduce using rule 2 (function_header)


State 72

   10 optional_parameter: optional_parameter ',' parameter .

    $default  reduce using rule 10 (optional_parameter)


State 73

    8 variable: IDENTIFIER ':' type IS . statement_

    error           shift, and go to state 28
    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    REDUCE          shift, and go to state 35
    IF              shift, and go to state 36
    '('             shift, and go to state 37

    statement_  go to state 85
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 74

   21 statement: REDUCE operator reductions . ENDREDUCE
   27 reductions: reductions . statement_

    error           shift, and go to state 28
    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    ENDREDUCE       shift, and go to state 86
    REDUCE          shift, and go to state 35
    IF              shift, and go to state 36
    '('             shift, and go to state 37

    statement_  go to state 87
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 75

   22 statement: IF expression THEN . statement_ ELSE statement_ ENDIF

    error           shift, and go to state 28
    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    REDUCE          shift, and go to state 35
    IF              shift, and go to state 36
    '('             shift, and go to state 37

    statement_  go to state 88
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 76

   44 primary: '(' expression ')' .

    $default  reduce using rule 44 (primary)


State 77

   17 body: BEGIN_ statement_ END ';' .

    $default  reduce using rule 17 (body)


State 78

   29 expression: expression OROP binary .
   31 binary: binary . ANDOP relation

    ANDOP  shift, and go to state 65

    $default  reduce using rule 29 (expression)


State 79

   31 binary: binary ANDOP relation .
   33 relation: relation . RELOP term

    RELOP  shift, and go to state 66

    $default  reduce using rule 31 (binary)


State 80

   33 relation: relation RELOP term .
   35 term: term . ADDOP factor

    ADDOP  shift, and go to state 67

    $default  reduce using rule 33 (relation)


State 81

   35 term: term ADDOP factor .
   37 factor: factor . MULOP exponent
   38       | factor . REMOP exponent

    MULOP  shift, and go to state 68
    REMOP  shift, and go to state 69

    $default  reduce using rule 35 (term)


State 82

   37 factor: factor MULOP exponent .

    $default  reduce using rule 37 (factor)


State 83

   38 factor: factor REMOP exponent .

    $default  reduce using rule 38 (factor)


State 84

   41 exponent: unary EXPOP exponent .

    $default  reduce using rule 41 (exponent)


State 85

    8 variable: IDENTIFIER ':' type IS statement_ .

    $default  reduce using rule 8 (variable)


State 86

   21 statement: REDUCE operator reductions ENDREDUCE .

    $default  reduce using rule 21 (statement)


State 87

   27 reductions: reductions statement_ .

    $default  reduce using rule 27 (reductions)


State 88

   22 statement: IF expression THEN statement_ . ELSE statement_ ENDIF

    ELSE  shift, and go to state 89


State 89

   22 statement: IF expression THEN statement_ ELSE . statement_ ENDIF

    error           shift, and go to state 28
    IDENTIFIER      shift, and go to state 29
    INT_LITERAL     shift, and go to state 30
    DOUBLE_LITERAL  shift, and go to state 31
    REAL_LITERAL    shift, and go to state 32
    BOOL_LITERAL    shift, and go to state 33
    NOTOP           shift, and go to state 34
    REDUCE          shift, and go to state 35
    IF              shift, and go to state 36
    '('             shift, and go to state 37

    statement_  go to state 90
    statement   go to state 39
    expression  go to state 40
    binary      go to state 41
    relation    go to state 42
    term        go to state 43
    factor      go to state 44
    exponent    go to state 45
    unary       go to state 46
    primary     go to state 47


State 90

   22 statement: IF expression THEN statement_ ELSE statement_ . ENDIF

    ENDIF  shift, and go to state 91


State 91

   22 statement: IF expression THEN statement_ ELSE statement_ ENDIF .

    $default  reduce using rule 22 (statement)
